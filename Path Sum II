/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    vector<vector<int>> ret;
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        vector<int> temp;
        if(root==NULL) return ret;
        temp.push_back(root->val);

        if(root->val==sum&&root->left==NULL&&root->right==NULL) {
            ret.push_back(temp);
            return ret;
        }
        dfs(root->left, sum-root->val, temp);
        dfs(root->right, sum-root->val, temp);
        return ret;
        
    }
    void dfs(TreeNode *root, int sum, vector<int> temp){
        if(root==NULL) return;
        temp.push_back(root->val);
        if(root->left==NULL&&root->right==NULL){
            if(root->val==sum){
                ret.push_back(temp);
                return;
            }
        }
        dfs(root->left, sum-root->val, temp);
        dfs(root->right, sum-root->val, temp);
    }
};
