class Solution {
private:
        queue<pair<int,int>> q;

public:
    void solve(vector<vector<char>> &board) {
        int m = board.size();       //row
        if(m==0) return;        
        int n = board[0].size();    //column
        for(int i=0;i<m;++i){
            if (board[i][0]=='O'){ q.push(pair<int,int>(i,0)); board[i][0]='1'; }
            if (n-1>=0&&board[i][n-1]=='O'){ q.push(pair<int,int>(i,n-1)); board[i][n-1]='1';}
        }
        for(int j=0;j<n;++j){
            if (board[0][j]=='O'){ board[0][j]='1';q.push(pair<int,int>(0,j));}
            if (m-1>=0&&board[m-1][j]=='O'){ board[m-1][j]='1';q.push(pair<int,int>(m-1,j));}
        }
        
        while(!q.empty()){
            dfs(q.front(),board,m,n);
            q.pop();
        }
        
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(board[i][j]=='O')
                    board[i][j]='X';
                else if(board[i][j]=='1')
                    board[i][j]='O';
            }
        }
    }
    
    void dfs(pair<int,int> point,vector<vector<char>> &board,int m, int n){
        if(point.first-1>=0&&board[point.first-1][point.second]=='O'){
            q.push(pair<int,int>(point.first-1,point.second));
            board[point.first-1][point.second]='1';
        }
        if(point.first+1<=m-1&&board[point.first+1][point.second]=='O'){
            q.push(pair<int,int>(point.first+1,point.second));
            board[point.first+1][point.second]='1';
        }
        if(point.second-1>=0&&board[point.first][point.second-1]=='O'){
            q.push(pair<int,int>(point.first,point.second-1));
            board[point.first][point.second-1]='1';
        }
        if(point.second+1<=n-1&&board[point.first][point.second+1]=='O'){
            q.push(pair<int,int>(point.first,point.second+1));
            board[point.first][point.second+1]='1';
        }
        
    }
};
